type: edu
custom_name: stage5
files:
- name: test/tests/ApiTester.java
  visible: false
  text: |
    package tests;

    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import com.google.gson.JsonElement;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import static java.lang.Math.abs;

    public class ApiTester {

        private static void checkJson(
            boolean passed,
            HttpResp resp,
            JsonElement json,
            String path,
            String should) {

            if (!passed) {
                if (path.length() != 0) {
                    path = " in the JSON in path \"" + path + "\"";
                }
                throw new WrongAnswer(
                    resp.getRequest() + " should " + should + path +
                        ".\nFound: \n\n" + getPrettyJson(json)
                );
            }
        }

        static String getPrettyJson(JsonElement json) {
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            return gson.toJson(json);
        }


        // ========== Object

        static void checkIsObject(HttpResp resp, JsonElement json) {
            checkIsObject(resp, json, "");
        }

        static void checkIsObject(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonObject(), resp, json, path, "contain a JSON object");
        }


        // ========== Array

        static void checkIsArray(HttpResp resp, JsonElement json) {
            checkIsArray(resp, json, "");
        }

        static void checkIsArray(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonArray(), resp, json, path, "contain a JSON array");
        }


        // ========== Null

        static void checkIsNull(HttpResp resp, JsonElement json) {
            checkIsNull(resp, json, "");
        }

        static void checkIsNull(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonNull(), resp, json, path, "be equal to a null");
        }


        // ========== String

        static void checkIsString(HttpResp resp, JsonElement json) {
            checkIsString(resp, json, "");
        }

        static void checkIsString(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonPrimitive() && json.getAsJsonPrimitive().isString(),
                resp, json, path, "contain a string");
        }

        static void checkStringValue(HttpResp resp, JsonElement json, String value, String path) {
            checkIsString(resp, json, path);
            checkJson(json.getAsString().equals(value), resp, json, path, "be equal to \"" + value + "\"");
        }


        // ========== Boolean

        static void checkIsBoolean(HttpResp resp, JsonElement json) {
            checkIsBoolean(resp, json, "");
        }

        static void checkIsBoolean(HttpResp resp, JsonElement json, String path) {
            checkJson(json.isJsonPrimitive() && json.getAsJsonPrimitive().isBoolean(),
                resp, json, path, "contain a boolean");
        }

        static void checkBooleanValue(HttpResp resp, JsonElement json, boolean value, String path) {
            checkIsBoolean(resp, json, path);
            checkJson(json.getAsBoolean() == value, resp, json, path, "be equal to " + value);
        }


        // ========== Int

        static void checkIsInt(HttpResp resp, JsonElement json) {
            checkIsInt(resp, json, "");
        }

        static void checkIsInt(HttpResp resp, JsonElement json, String path) {
            try {
                json.getAsInt();
            } catch (NumberFormatException ex) {
                checkJson(false, resp, json, path,"contain a number");
            }
        }

        static void checkIntValue(HttpResp resp, JsonElement json, int value, String path) {
            checkIsInt(resp, json, path);
            checkJson(json.getAsInt() == value, resp, json, path, "be equal to " + value);
        }


        // ========= Double

        static void checkIsDouble(HttpResp resp, JsonElement json) {
            checkIsDouble(resp, json, "");
        }

        static void checkIsDouble(HttpResp resp, JsonElement json, String path) {
            try {
                json.getAsDouble();
            } catch (NumberFormatException ex) {
                checkJson(false, resp, json, path,"contain a floating-point number");
            }
        }

        static void checkDoubleValue(HttpResp resp, JsonElement json, double value, String path) {
            checkIsDouble(resp, json, path);
            checkJson(abs(json.getAsDouble() - value) < 1e-6, resp, json, path, "be equal to " + value);
        }


        // ========== ObjectKey

        static void checkObjectKey(HttpResp resp, JsonElement json, String key) {
            checkObjectKey(resp, json, key, "");
        }

        static void checkObjectKey(HttpResp resp, JsonElement json, String key, String path) {
            checkIsObject(resp, json, path);
            checkJson(json.getAsJsonObject().has(key),
                resp, json, path, "contain a key \"" + key + "\" in object");
        }


        // ========== ArrayLength

        static void checkArrayLength(HttpResp resp, JsonElement json, int length) {
            checkArrayLength(resp, json, length, "");
        }

        static void checkArrayLength(HttpResp resp, JsonElement json, int length, String path) {
            checkIsArray(resp, json, path);
            checkJson(json.getAsJsonArray().size() == length,
                resp, json, path, "contain a JSON array with length " + length);
        }

    }
  learner_created: false
- name: test/tests/TestHelper.java
  visible: false
  text: |
    package tests;

    import com.google.gson.*;
    import org.apache.http.HttpHeaders;
    import org.apache.http.entity.ContentType;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;

    import java.util.Map;

    class HttpResp {
        private String url;
        private String method;
        private HttpResponse resp;

        HttpResp(HttpResponse resp, String url, String method) {
            this.url = url;
            this.resp = resp;
            this.method = method;
        }

        public String getUrl() {
            return url;
        }

        public String getMethod() {
            return method;
        }

        public String getRequest() {
            return getMethod() + " " + getUrl();
        }

        public int getStatusCode() {
            return resp.getStatusCode();
        }

        public Map<String, String> getHeaders() {
            return resp.getHeaders();
        }

        public byte[] getRawContent() {
            return resp.getRawContent();
        }

        public String getContent() {
            return resp.getContent();
        }

        public JsonElement getJson() {
            return resp.getJson();
        }
    }

    public class TestHelper {
        static void checkStatusCode(HttpResp resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkHeader(HttpResp resp, String header, String value) {
            Map<String, String> headers = resp.getHeaders();
            if (!headers.containsKey(header)) {
                throw new WrongAnswer(
                    resp.getRequest() +
                        " should respond with header \"Content-Type\", " +
                        "but this header is not found in the response."
                );
            }
            String actualValue = headers.get(header);
            if (!actualValue.equals(value)) {
                throw new WrongAnswer(
                    resp.getRequest() +
                        " should respond with header \"Content-Type\" being " +
                        "equal to " + value + " but in the response header " +
                        "\"Content-Type\" is equal to " + actualValue + "."
                );
            }
        }

        static JsonElement getJson(HttpResp resp) {
            checkHeader(resp,
                HttpHeaders.CONTENT_TYPE,
                ContentType.APPLICATION_JSON.getMimeType()
            );
            try {
                return resp.getJson();
            } catch (Exception ex) {
                throw new WrongAnswer(
                    resp.getRequest() + " should return a valid JSON"
                );
            }
        }

        static JsonElement getJson(String json) {
            return new JsonParser().parse(json);
        }
    }
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.any;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return req.basicAuth(login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            // Test login
            () -> testRegister(login1, pass1, 200),
            () -> testRegister(login2, pass2, 200),
            () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
            () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
            () -> testRegister(loginExist_login, loginExist_pass, 400),
            () -> testRegister(shortPassword_login, shortPassword_pass, 400),
            () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


            // Add 2 quizzes and check their existence
            () -> testAllQuizzes(0, 1),
            () -> testAllQuizzes(0, 2),

            () -> testCreateQuiz(0, 1),
            () -> testQuizExists(0, 2),
            () -> testQuizNotExists(0, 2, 125),

            () -> testAllQuizzes(1, 1),

            () -> testCreateQuiz(1, 2),
            () -> testQuizExists(1, 2),
            () -> testQuizNotExists(1, 2, 125),

            () -> testAllQuizzes(2, 2),


            // No auth operations tests
            () -> testAllQuizzesNoAuth(),
            () -> testCreateQuizNoAuth(1),
            () -> testCreateQuizNoAuth(2),
            () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
            () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesNoAuth(quizIds[0]),
            () -> testDeleteQuizzesNoAuth(quizIds[1]),


            // Fake auth operations tests
            () -> testAllQuizzesFakeAuth(),
            () -> testCreateQuizFakeAuth(1),
            () -> testCreateQuizFakeAuth(2),
            () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
            () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesFakeAuth(quizIds[0]),
            () -> testDeleteQuizzesFakeAuth(quizIds[1]),


            // Solve two quizzes
            () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

            () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),
            () -> checkQuizSuccess(quizIds[1], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[3]", false, 1),


            // Test database save
            () -> testAllQuizzes(2, 1),
            () -> testAllQuizzes(2, 2),
            () -> reloadServer(),
            () -> testAllQuizzes(2, 1),
            () -> testAllQuizzes(2, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),


            // Test wrongly created quizzes
            () -> addIncorrectQuiz(error400noTitle, 1),
            () -> addIncorrectQuiz(error400emptyTitle, 2),
            () -> addIncorrectQuiz(error400noText, 1),
            () -> addIncorrectQuiz(error400emptyText, 2),
            () -> addIncorrectQuiz(error400noOptions, 1),
            () -> addIncorrectQuiz(error400emptyOptions, 2),
            () -> addIncorrectQuiz(error400oneOption, 1),


            // Test multiple answers
            () -> testCreateQuiz(2, 1),
            () -> testQuizExists(2, 1),
            () -> testQuizNotExists(2, 1, 125),
            () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(3, 1),
            () -> testQuizExists(3, 1),
            () -> testQuizNotExists(3, 1, 125),
            () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(4, 1),
            () -> testQuizExists(4, 1),
            () -> testQuizNotExists(4, 1, 125),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

            () -> testCreateQuiz(5, 1),
            () -> testQuizExists(5, 1),
            () -> testQuizNotExists(5, 1, 125),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(6, 1),
            () -> testQuizExists(6, 1),
            () -> testQuizNotExists(6, 1, 125),
            () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

            () -> testAllQuizzes(7, 2),
            () -> reloadServer(),
            () -> testAllQuizzes(7, 2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


            // Test delete
            () -> testDelete(quizIds[0], 1, 204),
            () -> testDelete(quizIds[0], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizExists(1, 1),
            () -> testQuizExists(1, 2),

            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 2, 204),
            () -> testDelete(quizIds[1], 2, 404),
            () -> testDelete(quizIds[1], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),

            () -> testAllQuizzes(5, 1),
            () -> reloadServer(),
            () -> testAllQuizzes(5, 2),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),
        };

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpResponse resp = post(url, getPrettyJson(json)).send();

            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizzes[quizNum]).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = auth(post(url, quizzes[quizNum]), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");;
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpResponse resp = delete(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpResponse resp = auth(delete(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count, int user) {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/entity/Quiz.java
  visible: true
  learner_created: true
- name: src/resources/application.properties
  visible: true
  learner_created: true
- name: src/engine/entity/Answer.java
  visible: true
  text: |
    package engine.entity;

    import java.util.List;

    public class Answer {
        private List<Integer> answer;

        public Answer(List<Integer> answer) {
            this.answer = answer;
        }

        public Answer() {
        }

        public List<Integer> getAnswer() {
            return answer;
        }

        public void setAnswer(List<Integer> answer) {
            this.answer = answer;
        }
    }
  learner_created: true
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

            import org.springframework.boot.SpringApplication;
            import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {
        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }
    }
  learner_created: true
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '11'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        runtimeOnly 'com.h2database:h2'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: true
- name: src/engine/entity/User.java
  visible: true
  text: |
    package engine.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import javax.persistence.*;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.ArrayList;
    import java.util.List;

    @Entity
    @Table(name = "user")
    public class User {

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;
        @Column(name = "username", nullable = false)
        @Pattern(regexp = "\\w+@\\w+\\.\\w+")
        private String userName;
        @Column(name = "password", nullable = false)
        @Size(min = 5)
        private String password;

        @OneToMany(mappedBy = "author")
        @Column
        private List<Quiz> quizList = new ArrayList<Quiz>();

        public User() {
        }

        @JsonIgnore
        public Long getId() {
            return id;
        }

        @JsonIgnore
        public void setId(Long id) {
            this.id = id;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public List<Quiz> getQuizList() {
            return quizList;
        }

        public void setQuizList(List<Quiz> quizList) {
            this.quizList = quizList;
        }

        public String getUserName() {
            return userName;
        }

        public void setUserName(String userName) {
            this.userName = userName;
        }
    }
  learner_created: true
- name: src/engine/repository/UserRepository.java
  visible: true
  text: |
    package engine.repository;

    import engine.entity.User;
    import org.springframework.data.repository.CrudRepository;

    import java.util.Optional;

    public interface UserRepository extends CrudRepository<User,Long> {
        Optional<User> findbyEmailk(String email);
    }
  learner_created: true
- name: src/engine/entity/Response.java
  visible: true
  text: |
    package engine.entity;

    public class Response {
        private final static String CORRECT = "Congratulations, you're right!";
        private final static String INCORRECT = "Wrong answer! Please, try again.";
        private boolean success;
        private String feedback;

        public boolean isSuccess() {
            return success;
        }
        public void setSuccess(boolean success) {
            this.success = success;
        }
        public String getFeedback() {
            return feedback;
        }
        public void setFeedback(String feedback) {
            this.feedback = feedback;
        }

        public Response(boolean success) {
            this.success = success;
            if (success)
                feedback = CORRECT;
            else
                feedback = INCORRECT;
        }
        public Response(boolean success, String feedback) {
            this.success = success;
            this.feedback = feedback;
        }
    }
  learner_created: true
- name: src/engine/repository/QuizRepository.java
  visible: true
  text: |
    package engine.repository;

    import engine.entity.Quiz;
    import org.springframework.data.repository.CrudRepository;

    public interface QuizRepository extends CrudRepository<Quiz, Long> {


    }
  learner_created: true
- name: src/engine/service/BasicQuizService.java
  visible: true
  text: |-
    package engine.service;

    import engine.entity.Quiz;
    import engine.repository.QuizRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.List;

    @Service
    public class BasicQuizService implements QuizService {

        @Autowired
        private QuizRepository quizRepository;

        @Override
        public List<Quiz> getAllQuizzes() {
            return (List<Quiz>) quizRepository.findAll();
        }

        @Override
        public Quiz getQuizById(long id) {
            return quizRepository.findById(id)
                    .orElseThrow(() ->
                            new ResponseStatusException(HttpStatus.NOT_FOUND,
                            String.format("Quiz with id {%d} could not be found.", id)));
        }

        @Override
        public Quiz saveQuiz(Quiz quiz) {
            return quizRepository.save(quiz);
        }
    }
  learner_created: true
- name: src/engine/controller/QuizController.java
  visible: true
  text: |+
    package engine.controller;

    import engine.entity.Answer;
    import engine.entity.Quiz;
    import engine.entity.Response;
    import engine.service.QuizService;
    import org.apache.juli.logging.LogFactory;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;
    import java.util.ArrayList;
    import java.util.List;

    @RestController
    @RequestMapping(path = "/api/quizzes")
    public class QuizController {
        private static final  Logger LOGGER = LoggerFactory.getLogger(QuizController.class);

        @Autowired
        private QuizService quizService;

        @GetMapping
        public List<Quiz> getAllQuizzes() {
            return quizService.getAllQuizzes();
        }

        @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
        public Quiz addQuiz(@Valid @RequestBody final Quiz quiz) {
            LOGGER.info("The quiz is "+ quiz.toString());
            return quizService.saveQuiz(quiz);
        }

        @GetMapping(path = "/{id}")
        public Quiz getQuizWithId(@PathVariable final long id) {
            return quizService.getQuizById(id);
        }

        @PostMapping(path = "/{id}/solve", consumes = MediaType.APPLICATION_JSON_VALUE)
        public Response solveQuiz(@PathVariable final long id, @RequestBody final Answer answer) {

            return new Response(List.copyOf(quizService.getQuizById(id).getAnswer()).equals(answer.getAnswer()));
        }

    }

  learner_created: true
- name: src/engine/SecurityConfiguration.java
  visible: true
  learner_created: true
- name: src/engine/service/UserService.java
  visible: true
  learner_created: true
- name: src/engine/exception/BadRequestException.java
  visible: true
  learner_created: true
- name: src/engine/exception/ForbiddenException.java
  visible: true
  learner_created: true
- name: src/engine/controller/UserController.java
  visible: true
  learner_created: true
- name: src/resources/logback.xml
  visible: true
  learner_created: true
- name: src/engine/SwaggerConfig.java
  visible: true
  learner_created: true
- name: resources/logs/stdout.log.2020-08-22.0.gz
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/508/implement
status: Failed
feedback:
  message: |-
    Wrong answer in test #113

    The element at path &quot;/success&quot; should equal to true

    Full JSON:
    {
      &quot;success&quot;: false,
      &quot;feedback&quot;: &quot;Wrong answer! Please, try again.&quot;
    }

    Please find below the output of your program during this failed test.

    ---

    Hibernate: select user0_.id as id1_2_, user0_.username as username2_2_, user0_.password as password3_2_ from user user0_ where user0_.username=?
    2020-08-27 01:56:50.078 DEBUG 20396 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : POST &quot;/api/quizzes/8/solve&quot;, parameters={}
    2020-08-27 01:56:50.078 DEBUG 20396 --- [nio-8889-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to engine.controller.QuizController#solveQuiz(long, Answer)
    2020-08-27 01:56:50.079 DEBUG 20396 --- [nio-8889-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Read &quot;application/json;charset=UTF-8&quot; to [engine.entity.Answer@3c752310]
    Hibernate: select quiz0_.id as id1_0_0_, quiz0_.answer as answer2_0_0_, quiz0_.author_id as author_i5_0_0_, quiz0_.text as text3_0_0_, quiz0_.title as title4_0_0_, user1_.id as id1_2_1_, user1_.username as username2_2_1_, user1_.password as password3_2_1_ from quiz quiz0_ left outer join user user1_ on quiz0_.author_id=user1_.id where quiz0_.id=?
    2020-08-27 01:56:50.082 DEBUG 20396 --- [nio-8889-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Using &#39;application/json&#39;, given [*/*] and supported [application/json, application/*+json, application/json, application/*+json]
    2020-08-27 01:56:50.085 DEBUG 20396 --- [nio-8889-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Writing [engine.entity.Response@9b47263]
    2020-08-27 01:56:50.089 DEBUG 20396 --- [nio-8889-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK
  time: Wed, 26 Aug 2020 20:26:53 UTC
record: 5
